openapi: 3.0.2
info:
  version: 1.0.0
  title: PetStore API Project Template
  description: |
    # Шаблон спецификации - пример описания

    ## Глоссарий основных сущностей сервиса:

    * Transfer - перевод в системе YooMoney. Отражает атрибуты и состояние перевода. Идентификатор перевода (TransferId) является первичной ссылкой на все последующие процессы. Для совершения перевода следует указать Откуда, Кому, Сколько и Как.
    * Source - платежные данные отправителя перевода, источник средств ("Откуда"). Наследники этого типа представляют реализации конкретных источников перевода (кошелек, банковская карта, etc).
    * Recipient - получатель перевода, данные о получателе перевода ("Кому"). Наследники этого типа представляют реализации конкретных получателей перевода (номер кошелька, номер телефона, номер банковской карты, etc).
    * MonetaryAmount - определение суммы в указанной валюте ("Сколько"). Мы не говорим "заплати 100", мы используем термин "заплати 100 рублей".
    * Confirmation - пользовательский процесс подтверждения перевода ("Как"). Наследники этого типа представляют реализации конкретных процессов подтверждения перевода (редирект на страницы 3-D Secure, redirectUrl).

servers:
  - url: https://hostname/template-api/v1
security:
  - OAuth2Wallet:
      - account-info
paths:
  /transfers:
    post:
      summary: Проведение перевода
      description: |
        Проведение перевода, включая процессы подтверждения перевода отправителем.
        Метод идемпотентен по значению transferToken.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transferToken:
                  $ref: '#/components/schemas/TransferToken'
              required:
                - transferToken
      responses:
        "200":
          description: Запрос успешно выполнен. Результат и шаг процесса проведения перевода отражает значение поля status ответа.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        "202":
          $ref: '#/components/responses/Accepted'
        "400":
          $ref: '#/components/responses/ArgumentsError'
        "401":
          $ref: '#/components/responses/AuthenticationError'
        "403":
          $ref: '#/components/responses/PermissionsError'
        "429":
          $ref: '#/components/responses/TooManyRequestsError'
        "500":
          $ref: '#/components/responses/TechnicalError'
  /transfer-options:
    get:
      summary: Запрос доступных способов совершения перевода
      description: |
        Метод отображает доступные способы совершения перевода для указанного типа получателя.
        Метод не сохраняет состояние на сервере.

        ### Назначение:
        * Если необходимо узнать возможные способы совершения перевода указанному получателю.
        * Используется по желанию клиента (необязательный).
      parameters:
        - name: amount
          description: Сумма перевода, десятичное число с фиксированной точкой в строковом представлении.
          in: query
          required: true
          schema:
            type: string
            example: '10.00'
        - name: currency
          description: ISO-4217 3-alpha символьный код валюты перевода.
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/CurrencyCode'
      responses:
        "200":
          description: |
            Список доступных способов совершения перевода.
            Если нет ни одного подходящего способа, список будет пустым.
            Каждый элемент списка содержит тип источника совершения перевода (SourceType) и список способов подтверждения перевода (СonfirmationType).
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: Доступные способы совершения перевода
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/TransferOption'
                required:
                  - items
        "400":
          $ref: '#/components/responses/ArgumentsError'
        "401":
          $ref: '#/components/responses/AuthenticationError'
        "403":
          $ref: '#/components/responses/PermissionsError'
        "429":
          $ref: '#/components/responses/TooManyRequestsError'
        "500":
          $ref: '#/components/responses/TechnicalError'
  /tokens:
    post:
      summary: Сохранение и проверка данных отправителя, получателя и параметров перевода, формирование токена для последующего проведения перевода
      description: |
        Сохранение и проверка данных отправителя, получателя и параметров перевода, формирование токена для последующего проведения перевода
        Метод не совершает действий процесса перевода, а лишь проверяет на корректность и сохраняет платежные данные отправителя, формируя контекст перевода (TransferToken).
        Повторные вызовы этого метода будут порождать новые экземпляры TransferToken.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  allOf:
                    - $ref: '#/components/schemas/MonetaryAmount'
                    - description: Сумма перевода, сумма к получению.
                message:
                  description: Сообщение получателю, можно указать для перевода любого типа кроме пополнения собственного кошелька.
                  type: string
                  maxLength: 200
              required:
                - amount
      responses:
        "200":
          description: Данные перевода проверены и сохранены успешно.
          content:
            application/json:
              schema:
                type: object
                properties:
                  transferToken:
                    $ref: '#/components/schemas/TransferToken'
                  charge:
                    allOf:
                      - $ref: '#/components/schemas/MonetaryAmount'
                      - description: MonetaryAmount, сумма к оплате отправителем.
                  fee:
                    allOf:
                      - $ref: '#/components/schemas/Fee'
                      - description: Комиссия с отправителя сверх суммы перевода. Поле присутствует в случае наличия комиссий сверх суммы перевода.
                required:
                  - transferToken
        "400":
          description: Запрос с указанными параметрами не может быть выполнен.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: '#/components/schemas/ArgumentsError'
                      - title: ValidationRulesViolationError
                        description: |
                          Перевод с указанными параметрами не может быть совершен:
                          * получатель перевода не существует, недоступен или не может быть однозначено определен.
                          Коды ошибок:
                          * RuleViolation - Отказ по правилам бизнес-логики:
                              * RecipientNotFound - Получатель перевода не существует или заблокирован.
                              * RecipientAmbiguity - Невозможно однозначно определить получателя перевода, указанным данным соответствует несколько кошельков.
                        type: object
                        properties:
                          type:
                            description: Причина отказа в проведении перевода - правило бизнес-логики.
                            type: string
                            enum:
                              - RuleViolation
                            example: 'RuleViolation'
                          rule:
                            description: Код правила бизнес-логики.
                            type: string
                            enum:
                              - RecipientNotFound
                              - RecipientAmbiguity
                            example: 'RecipientAmbiguity'
                        required:
                          - type
                          - rule
                required:
                  - error
        "401":
          $ref: '#/components/responses/AuthenticationError'
        "403":
          description: Ответ о запрете выполнения запроса.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    oneOf:
                      - $ref: '#/components/schemas/PermissionsError'
                      - title: AuthenticationRulesViolationError
                        description: |
                          Перевод с указанного кошелька не может быть совершен:
                          * Кошелек отправителя перевода заблокирован.
                          Коды ошибок:
                          * RuleViolation - Отказ по правилам бизнес-логики:
                              * SourceWalletBlocked - Кошелек отправителя перевода заблокирован.
                        type: object
                        properties:
                          type:
                            description: Причина отказа в проведении перевода - правило бизнес-логики.
                            type: string
                            enum:
                              - RuleViolation
                            example: 'RuleViolation'
                          rule:
                            description: Код правила бизнес-логики.
                            type: string
                            enum:
                              - SourceWalletBlocked
                            example: 'SourceWalletBlocked'
                          resolveUrl:
                            description: |
                              URL страницы, на которую следует отправить пользователя для разрешения причин отказа в проведении перевода. Присутствует при type=SourceWalletBlocked.
                            type: string
                        required:
                          - type
                          - rule
                required:
                  - error
        "429":
          $ref: '#/components/responses/TooManyRequestsError'
        "500":
          $ref: '#/components/responses/TechnicalError'
components:
  securitySchemes:
    OAuth2Wallet:
      description: OAuth2 авторизация кошелька YooMoney
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://hostname/oauth/authorize
          tokenUrl: https://hostname/oauth/token
          scopes:
            account-info: Информация о состоянии кошелька
  schemas:
    ConfirmationType:
      description: |
        Тип пользовательского процесса подтверждения перевода:
        * Redirect - необходимо направить пользователя на веб-страницу.
      type: string
      enum:
        - Redirect
      example: 'Redirect'
    TransferStatus:
      description: |
        Статус перевода:

        * Pending - Перевод ожидает подтверждения или иных действий отправителя.
        * Sent - Перевод успешно отправлен получателю и ожидает приёма.
        * Delivered - Перевод успешно завершен, доставлен получателю.
        * Canceled - В проведении перевода отказано, перевод отвергнут получателем или срок его приема истёк.

        Возможные последовательности переходов состояний:

        * Pending -> (Sent, Delivered, Canceled)
        * Sent -> (Delivered, Canceled)
        * Delivered и Canceled это финальные состояния
      type: string
      enum:
        - Pending
        - Sent
        - Delivered
        - Canceled
      example: 'Delivered'
    TransferErrorType:
      description: |
        Причина отказа в проведении перевода или его отмены.
        * InsufficientFunds - Недостаточно средств для совершения перевода.
        * LimitExceeded - Превышен один из лимитов на операции:

          * на сумму операции для выданного токена авторизации;
          * сумму операций за период времени для выданного токена авторизации;
          * ограничений платежной системы для различных видов операций.

        * IdentificationRequired - Для проведения перевода требуется идентификация отправителя.
        * SimplifiedIdentificationRequired - Для проведения перевода требуется упрощенная идентификация отправителя.
        * TransferExpired - Истек срок, отведенный для приема перевода получателем. Перевод возвращен отправителю.
        * TransferDeclined - В проведении перевода отказано. Generic ошибка для всех остальных отказов в проведении перевода.
      type: string
      enum:
        - InsufficientFunds
        - LimitExceeded
        - IdentificationRequired
        - SimplifiedIdentificationRequired
        - TransferExpired
        - TransferDeclined
      example: 'InsufficientFunds'
    TransferError:
      description: Отказ в проведении перевода или причина его отмены.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TransferErrorType'
      discriminator:
        propertyName: type
      required:
        - type
    TransferId:
      description: Идентификатор перевода
      type: string
      minLength: 36
      maxLength: 36
      example: '1da5c87d-0984-50e8-a7f3-8de646dd9ec9'
    Transfer:
      description: Перевод в системе YooMoney.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TransferId'
        status:
          $ref: '#/components/schemas/TransferStatus'
        error:
          allOf:
            - $ref: '#/components/schemas/TransferError'
            - description: Причина отказа в проведении перевода или его отмены. Присутствует при status=Canceled.
      required:
        - id
        - status
    TransferToken:
      description: |
        Одноразовый токен для проведения перевода, имеет ограниченный срок действия.
      type: string
      maxLength: 200
      example: '+u7PDjMTkf08NtD66P6+eYWa2yjU3gsSIhOOO+OWsOg='
    Fee:
      description: Комиссия с отправителя сверх суммы перевода.
      type: object
      properties:
        service:
          $ref: '#/components/schemas/MonetaryAmount'
        counterparty:
          $ref: '#/components/schemas/MonetaryAmount'
      required:
        - service
        - counteragent
    TransferOption:
      description: Определение способа совершения перевода.
      type: object
      properties:
        charge:
          allOf:
            - $ref: '#/components/schemas/MonetaryAmount'
            - description: MonetaryAmount, сумма к оплате отправителем.
        fee:
          allOf:
            - $ref: '#/components/schemas/Fee'
            - description: Комиссия с отправителя сверх суммы перевода. Поле присутствует в случае наличия комиссий сверх суммы перевода.
      required:
        - charge
    ArgumentsError:
      description: |
        Операция с указанными параметрами не может быть совершена:
        * отсутствуют обязательные параметры запроса или они имеют недопустимые значения;
        * отсутствуют обязательные HTTP-заголовки запроса или они имеют недопустимое значение;
        * формат запроса содержит синтаксические ошибки;

        Коды ошибок:
        * SyntaxError - Нарушен синтаксис запроса, запрос невозможно разобрать.
        * IllegalParameters - Параметры запроса отсутствуют или имеют недопустимое значение.
        * IllegalHeaders - HTTP-заголовоки запроса отсутствуют или имеют недопустимое значение.
      type: object
      properties:
        type:
          description: Код ошибки.
          type: string
          enum:
            - SyntaxError
            - IllegalParameters
            - IllegalHeaders
          example: 'IllegalParameters'
        parameterNames:
          description: Список наименований и путей параметров, содержащих некорректные значения. Присутствует при type=IllegalParameters.
          type: array
          items:
            type: string
            example: 'amount'
            description: |
              Имя параметра включая его полный путь в JSON документе. Поле вложенного объекта указывается через точку. Номер элемента списка указывается в квадратных скобках.
              Примеры:

                * currency
                * amount.value
                * options[0].amount.value
        headerNames:
          description: Список наименований заголовков запроса, содержащих некорректные значения. Присутствует при type=IllegalHeaders.
          type: array
          items:
            type: string
            example: 'Authorization'
      required:
        - type
    PermissionsError:
      description: |
        Запрос не может быть выполнен — Клиент не обладает достаточными правами, или состояние учетной записи клиента не позволяет совершить операцию.

        Коды ошибок:
        * InvalidScope - Указанная авторизация клиента не обладает достаточными правами для совершения этой операции.
      type: object
      properties:
        type:
          type: string
          enum:
            - InvalidScope
          example: 'InvalidScope'
      required:
        - type
    CurrencyCode:
      description: Код валюты, ISO-4217 3-alpha currency symbol.
      type: string
      pattern: '[A-Z]{3}'
      example: 'RUB'
    MonetaryAmount:
      description: Сумма в выбранной валюте.
      type: object
      properties:
        value:
          description: Сумма, десятичное число с фиксированной точкой в строковом представлении.
          type: string
          pattern: (\d+\.\d{2}|\d+)
          example: '10.00'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
      required:
        - value
        - currency
  responses:
    Accepted:
      description: |
        Запрос принят в обработку но результат его выполнения неизвестен.
        Клиенту следует повторить запрос с теми же аргументами спустя указанное в ответе время.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    description: Код состояния.
                    type: string
                    enum:
                      - ProcessingRequest
                    example: 'ProcessingRequest'
                  retryAfter:
                    description: Рекомендуемое количество миллисекунд, спустя которое следует повторить запрос.
                    type: integer
                    format: int64
                    example: 5000
                    minimum: 10
                required:
                  - type
                  - retryAfter
            required:
              - error
    ArgumentsError:
      description: Запрос с указанными параметрами не может быть выполнен.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/ArgumentsError'
    AuthenticationError:
      description: |
        Запрос не может быть выполнен — ошибка аутентификационных данных клиента.

        Коды ошибок:
        * InvalidCredentials - Отсутствуют или недействительны данные Basic-авторизации запроса.
        * InvalidToken - Отсутствует или недействительна OAuth2 авторизация кошелька.
        * InvalidSignature - Отсутствует или неверна электронная подпись запроса.
        * InvalidInstanceId - Отсутствует или недействителен уникальный идентификатор установки приложения.
      headers:
        WWW-Authenticate:
          schema:
            type: string
            default: Bearer realm="API", error="invalid_token"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    description: Код ошибки.
                    type: string
                    enum:
                      - InvalidCredentials
                      - InvalidToken
                      - InvalidSignature
                      - InvalidInstanceId
                    example: 'InvalidCredentials'
                required:
                  - type
            required:
              - error
    PermissionsError:
      description: Ответ о запрете выполнения запроса.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/PermissionsError'
            required:
              - error
    TooManyRequestsError:
      description: |
        Превышено разрешенное количество запросов в единицу времени. Запрос отвергнут.
        Клиенту следует:
        * Отправить следующий запрос не ранее чем спустя время retryAfter;
        * Cнизить общее количество запросов к серверу в единицу времени.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    description: Код ошибки.
                    type: string
                    enum:
                      - TooManyRequests
                    example: 'TooManyRequests'
                  retryAfter:
                    description: Рекомендуемое количество миллисекунд, спустя которое следует повторить запрос.
                    type: integer
                    format: int64
                    example: 5000
                    minimum: 10
                required:
                  - type
                  - retryAfter
            required:
              - error
    TechnicalError:
      description: |
        Техническая ошибка. Результат выполнения запроса неизвестен.
        Клиенту следует повторить запрос с теми же аргументами спустя указанное время ожидания.

        Коды ошибок:
        * TechnicalError - Техническая ошибка сервиса.
        * ServiceUnavailable - Сервис временно недоступен.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    description: Код ошибки
                    type: string
                    enum:
                      - TechnicalError
                      - ServiceUnavailable
                    example: 'TechnicalError'
                  retryAfter:
                    description: Рекомендуемое количество миллисекунд, спустя которое следует повторить запрос.
                    type: integer
                    format: int64
                    example: 5000
                    minimum: 10
                  description:
                    description: Дополнительное текстовое пояснение причины ошибки. Может присутствовать в некоторых случаях.
                    type: string
                    example: 'Съешь еще этих мягких французских булок'
                required:
                  - type
            required:
              - error
